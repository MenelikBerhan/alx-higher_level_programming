============================
The ``0-add_integer`` module
============================

Using ``add_integer``
-------------------
Prototype: ``def add_integer(a, b=98):``

This is a test file in reStructuredText format.  First import
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now test it for various edge cases:
Two-Integer arguments
=====================
    >>> add_integer(1, 2)
    3

One-Integer argument
====================
    >>> add_integer(1)
    99

One-Float argument
==================
    >>> add_integer(-1.9,)
    97

Two-Float arguments
===================
    >>> add_integer(10.3, -2.8)
    8

One-Integer and One-String arguments
====================================
    >>> add_integer(4, "School")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer("School", 4)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

One-Float and One-Integer arguments
===================================
    >>> add_integer(100.3, -2)
    98

    >>> add_integer(-2, -100.9)
    -102

Two-improper type arguments
===========================
    >>> add_integer([1, 3], (3, 3))
    Traceback (innermost last):
    TypeError: a must be an integer

With-out any argument
=====================
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

One-None argument
=================
    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(None, 2)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(2, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Very-large Float arguments
==========================
    >>> add_integer(1e100, 1e100) == int(1e100) + int(1e100)
    True

A ``nan`` not a number argument
===============================
    >>> add_integer(float("nan"))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer
