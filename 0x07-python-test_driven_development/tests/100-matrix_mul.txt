============================
The ``100-matrix_mul`` module
============================

Using ``matrix_mul``
-------------------
Prototype: ``def matrix_mul(m_a, m_b):``

This is a test file in reStructuredText format.  First import
``matrix_mul`` from the ``100-matrix_mul`` module:

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Now test it for various cases:
Proper arguments
================
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]
    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]
    >>> matrix_mul([[1, 0, 1], #doctest: +NORMALIZE_WHITESPACE
    ...             [2, 1, 1],
    ...             [0, 1, 1],
    ...             [1, 1, 2]],
    ...            [[1, 2, 1],
    ...             [2, 3, 1],
    ...             [4, 2, 2]])
    [[5, 4, 3],
     [8, 9, 5],
     [6, 5, 3],
     [11, 9, 6]]

Arguments are not list
======================
    >>> matrix_mul(1, [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list
    >>> matrix_mul([[1, 2], [3, 4]], 5)
    Traceback (most recent call last):
    TypeError: m_b must be a list

Arguments are not list of lists
===============================
    >>> matrix_mul([1], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists
    >>> matrix_mul([[1, 2], [3, 4]], [5])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

Arguments are empty list
========================
    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty
    >>> matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

Arguments are list of empty lists
=================================
    >>> matrix_mul([[]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty
    >>> matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

Arguments are list of lists containing a non-number
===================================================
    >>> matrix_mul([[1, '2'], [3, 4]], [[1, 2], [3, '4']])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats
    >>> matrix_mul([[1, 2]], [[3, [4]], ['5', 6]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

Arguments not a rectangle
=========================
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 4], [3, 4]])
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size
    >>> matrix_mul([[], [1, 2], [3, 4]], [[1, 2, 4], [3, 4]])
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

Arguments not compatible
========================
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied
    >>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

Arguments with multiple edge cases
==================================
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 4], [3, 4], ['5', 6]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats
    >>> matrix_mul([], [[1, 2], [3, 4], ['5', 6]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 4], [3, 4], [5, 6]])
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size
    >>> matrix_mul([], [[1, 2], [3, 4], "[5, 6]"])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists
    >>> matrix_mul("[]", [[1, 2], [3, 4], "[5, 6]"])
    Traceback (most recent call last):
    TypeError: m_a must be a list
